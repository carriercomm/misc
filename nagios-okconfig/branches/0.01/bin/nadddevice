#!/usr/bin/perl

use strict;
use Socket;
use Cwd;

if (@ARGV < 2) {
	print STDERR "Usage $0 <hostname> <parent[,parent2...]> [platform, default windows] \"<description>\"\n";
	print STDERR "  Too many arguments specified\n" if @ARGV > 2;
	exit 1;
}

my $host = $ARGV[0];
my $parents = ($ARGV[1] ? "	parents		$ARGV[1]" : "") ;

my $aton = inet_aton($ARGV[0]);
if (!$aton) {
	print STDERR "Unknown host $host\n";
	exit 1;
}
my $ip = inet_ntoa($aton);

my $cwd = getcwd();

my ($service, $stage) = (split(/\//, $cwd))[-2,-1];

if ($stage ne 'dev' and $stage ne 'prod') {
	print STDERR "Invalid stage $stage, must be prod or dev. Please check\nthe current working directory, should be \"service/stage\"\n";
	exit 1;
}

my $platform = lc($ARGV[2]);

my $additional_info = $ARGV[3] || "";
my $alias = ($additional_info ? "	alias		$additional_info" : "");


if (-e "$host.cfg") {
	print STDERR "Configuration file $host.cfg already exists, not overwriting!\n";
	exit 1;
}

print "Creating host $host - $ip, service $service, stage $stage\n";

open CFG, ">$host.cfg" or
	die "Unable to open $host.cfg for writing: $!";


if ($platform =~ /^win/ or !$platform) {
	$platform = "win";
	
	print CFG <<"	EOCFG";
define host {
	use		generic-$platform-server-$stage,generic-$service-server-$stage

$parents
$alias
	host_name	$host
	contact_groups	+$service-admins,$service-$stage-admins
	hostgroups	+$service-$stage-servers,$service-servers
	address		$ip
}


define service {
	use		check-generic-$platform-$stage-services,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$service-admins,$service-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-disks,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$service-admins,$service-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-cpu,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$service-admins,$service-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-mem,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$service-admins,$service-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-ping,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$service-admins,$service-$stage-admins
	host_name	$host
}
	EOCFG
} elsif ($platform =~ /^lin/) {
	$platform = "linux";
	
	print CFG <<"	EOCFG";
define host {
	use		generic-$platform-server-$stage,generic-$service-server-$stage

$parents
$alias
	host_name	$host
	contact_groups	+$service-admins,$service-$stage-admins
	hostgroups	+$service-$stage-servers,$service-servers
	address		$ip
};


define service {
	use		check-generic-$platform-$stage-loadavg,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$service-admins,$service-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-disks,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$service-admins,$service-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-mem,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$service-admins,$service-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-ping,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$service-admins,$service-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-ntpsync,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$service-admins,$service-$stage-admins
	host_name	$host
}
	EOCFG

} elsif ($platform =~ /^hpux/) {
	$platform = "hpux";
	
	print CFG <<"	EOCFG";
define host {
	use		generic-$platform-server-$stage,generic-$service-server-$stage

$parents
$alias
	host_name	$host
	contact_groups	+$service-admins,$service-$stage-admins
	hostgroups	+$service-$stage-servers,$service-servers
	address		$ip
};


define service {
	use		check-generic-$platform-$stage-loadavg,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$service-admins,$service-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-disks,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$service-admins,$service-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-mem,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$service-admins,$service-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-ping,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$service-admins,$service-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-ntpsync,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$service-admins,$service-$stage-admins
	host_name	$host
}
	EOCFG

} elsif ($platform =~ /^aix/) {
	$platform = "aix";
	
	print CFG <<"	EOCFG";
define host {
	use		generic-$platform-server-$stage,generic-$service-server-$stage

$parents
$alias
	host_name	$host
	contact_groups	+$service-admins,$service-$stage-admins
	hostgroups	+$service-$stage-servers,$service-servers
	address		$ip
};


define service {
	use		check-generic-$platform-$stage-loadavg,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$service-admins,$service-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-disks,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$service-admins,$service-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-mem,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$service-admins,$service-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-ping,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$service-admins,$service-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-ntpsync,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$service-admins,$service-$stage-admins
	host_name	$host
}
	EOCFG

} elsif ($platform =~ /^esx/) {
        $platform = "esx";

	if (!$additional_info) {
		close CFG;
		print STDERR "ESX Addition has a extra parameter VMotionIP\n\nUsage $0 <hostname> <parent[,parent2...]> esx <VMotionIP>\n";
		unlink "$host.cfg";
		exit 1;
	}

	print CFG <<"	EOCFG";
define host {
	use		generic-$platform-server-$stage,generic-$service-server-$stage

$parents
$alias
	host_name	$host
	contact_groups	+$service-admins,$service-$stage-admins
	hostgroups	+$service-$stage-servers,$service-servers
	address		$ip
};


define service {
	use		check-generic-$platform-$stage-loadavg,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$platform-admins,$platform-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-disks,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$platform-admins,$platform-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-mem,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$platform-admins,$platform-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-ping,check-generic-$service-$stage-services

	servicegroups	+$service-$stage,$service
	contact_groups	+$platform-admins,$platform-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-ping-vmkernel,check-generic-$service-$stage-services

	check_command	check_ping_host!160.210.72.131!200.0,20%!600.0,60%
	servicegroups	+$service-$stage,$service
	contact_groups	+$platform-admins,$platform-$stage-admins
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-ntpsync,check-generic-$service-$stage-services

	contact_groups	+$platform-admins,$platform-$stage-admins
	servicegroups	+$service-$stage,$service
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-mem,check-generic-$service-$stage-services

	contact_groups	+$platform-admins,$platform-$stage-admins
	servicegroups	+$service-$stage,$service
	host_name	$host
}

define service {
	use		check-generic-$platform-$stage-cpu,check-generic-$service-$stage-services

	contact_groups	+$platform-admins,$platform-$stage-admins
	servicegroups	+$service-$stage,$service
	host_name	$host
}
define service {
	use		check-generic-$platform-$stage-vmfsdiskspace,check-generic-$service-$stage-services

	contact_groups	+$platform-admins,$platform-$stage-admins
	servicegroups	+$service-$stage,$service
	host_name	$host
}
define service {
	use		check-generic-$platform-$stage-swap,check-generic-$service-$stage-services

	contact_groups	+$platform-admins,$platform-$stage-admins
	servicegroups	+$service-$stage,$service
	host_name	$host
}
	EOCFG

} else {
	print STDERR "Invalid platform $platform\n";
	close CFG;
	unlink "$host.cfg";
	exit 1;
}

close CFG;

